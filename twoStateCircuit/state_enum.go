// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package twoStateCircuit

import (
	"fmt"
)

const (
	// StateClosed is a State of type Closed.
	StateClosed State = iota
	// StateOpen is a State of type Open.
	StateOpen
)

const _StateName = "ClosedOpen"

var _StateMap = map[State]string{
	StateClosed: _StateName[0:6],
	StateOpen:   _StateName[6:10],
}

// String implements the Stringer interface.
func (x State) String() string {
	if str, ok := _StateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("State(%d)", x)
}

var _StateValue = map[string]State{
	_StateName[0:6]:  StateClosed,
	_StateName[6:10]: StateOpen,
}

// ParseState attempts to convert a string to a State
func ParseState(name string) (State, error) {
	if x, ok := _StateValue[name]; ok {
		return x, nil
	}
	return State(0), fmt.Errorf("%s is not a valid State", name)
}
